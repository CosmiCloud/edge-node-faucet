
const fs = require("fs");
const path = require("path");
const configPath = path.resolve(__dirname, "../config/faucet_config.json");
const config = JSON.parse(fs.readFileSync(configPath, "utf8"));
const app = require('../app');
const debug = require('debug')('express:server');
const https = require('https');
const http = require('http');
const port = normalizePort(config.port || '3000')

app.set('port', port);

if (config.sl_key_path != "" && config.ssl_cert_path != "") {
  const privateKey = fs.readFileSync(config.sl_key_path);
  const certificate = fs.readFileSync(config.ssl_cert_path);
  var server = https.createServer(
      {
        key: privateKey,
        cert: certificate,
      },
      app
    );
  console.log(`Server listening with SSL`);
} else {
  var server = http.createServer(app);
  console.log(`Server listening without SSL`);
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
